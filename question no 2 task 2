#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>

using namespace std;

void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

int main() {
    // Create a vector of 100,000 integers in descending order
    vector<int> arr(100000);
    for (int i = 0; i < 100000; i++) {
        arr[i] = 100000 - i;
    }

    // Time and sort the array using bubbleSort
    auto startTime1 = chrono::high_resolution_clock::now();
    bubbleSort(arr);
    auto endTime1 = chrono::high_resolution_clock::now();
    auto duration1 = chrono::duration_cast<chrono::microseconds>(endTime1 - startTime1);

    // Time and sort the array using STL sort
    auto startTime2 = chrono::high_resolution_clock::now();
    sort(arr.begin(), arr.end());
    auto endTime2 = chrono::high_resolution_clock::now();
    auto duration2 = chrono::duration_cast<chrono::microseconds>(endTime2 - startTime2);

    // Print execution times
    cout << "Bubble Sort Execution Time: " << duration1.count() << " microseconds\n";
    cout << "STL Sort Execution Time: " << duration2.count() << " microseconds\n";

    // Print first 10 and last 10 integers
    cout << "First 10 integers: ";
    for (int i = 0; i < 10; i++) {
        cout << arr[i] << " ";
    }
    cout << "\nLast 10 integers: ";
    for (int i = 99990; i < 100000; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
